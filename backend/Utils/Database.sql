-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.courseinfo
(
    courseid integer,
    coursename text COLLATE pg_catalog."default",
    credits integer,
    grading character varying(8) COLLATE pg_catalog."default",
    difficulty integer
);

CREATE TABLE IF NOT EXISTS public.courseinstructor
(
    courseid integer,
    instructorid integer
);

CREATE TABLE IF NOT EXISTS public.courserating
(
    courseid integer,
    ratingsum integer,
    ratedcount integer
);

CREATE TABLE IF NOT EXISTS public.courses
(
    courseid serial NOT NULL,
    coursecode character varying(6) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT courses_pkey PRIMARY KEY (courseid),
    CONSTRAINT courses_coursecode_key UNIQUE (coursecode)
);

CREATE TABLE IF NOT EXISTS public.faculty
(
    facultyid serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    designation character varying(4) COLLATE pg_catalog."default",
    office character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT faculty_pkey PRIMARY KEY (facultyid)
);

CREATE TABLE IF NOT EXISTS public.leaderboard
(
    userid integer NOT NULL,
    total_score integer DEFAULT 0,
    rank integer,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT leaderboard_pkey PRIMARY KEY (userid)
);

CREATE TABLE IF NOT EXISTS public.messagereactions
(
    reactionid serial NOT NULL,
    messageid integer,
    userid integer,
    reaction_type character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT messagereactions_pkey PRIMARY KEY (reactionid)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    messageid serial NOT NULL,
    roomid integer,
    userid integer,
    content text COLLATE pg_catalog."default" NOT NULL,
    posted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT messages_pkey PRIMARY KEY (messageid)
);

CREATE TABLE IF NOT EXISTS public.past_papers
(
    paper_id serial NOT NULL,
    paper_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    paper_year integer NOT NULL,
    file_link text COLLATE pg_catalog."default" NOT NULL,
    courseid integer NOT NULL,
    file_link_down text COLLATE pg_catalog."default",
    CONSTRAINT past_papers_pkey PRIMARY KEY (paper_id)
);

CREATE TABLE IF NOT EXISTS public.progress
(
    progressid serial NOT NULL,
    userid integer,
    courseid integer,
    task tasktype,
    taskid integer,
    score integer,
    max_score integer,
    completion_date timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT progress_pkey PRIMARY KEY (progressid)
);

CREATE TABLE IF NOT EXISTS public.resetpassword
(
    userid integer NOT NULL,
    reset_token text COLLATE pg_catalog."default" NOT NULL,
    token_expiry timestamp without time zone NOT NULL,
    CONSTRAINT resetpassword_pkey PRIMARY KEY (userid)
);

CREATE TABLE IF NOT EXISTS public.roommoderators
(
    moderatorid serial NOT NULL,
    roomid integer,
    userid integer,
    CONSTRAINT roommoderators_pkey PRIMARY KEY (moderatorid)
);

CREATE TABLE IF NOT EXISTS public.rooms
(
    roomid serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by integer,
    CONSTRAINT rooms_pkey PRIMARY KEY (roomid)
);

CREATE TABLE IF NOT EXISTS public.transcript
(
    transcriptid serial NOT NULL,
    userid integer,
    courseid integer,
    credits integer,
    grade character varying(2) COLLATE pg_catalog."default",
    semester character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT transcript_pkey PRIMARY KEY (transcriptid)
);

CREATE TABLE IF NOT EXISTS public.usercourserating
(
    userid integer NOT NULL,
    courseid integer NOT NULL,
    CONSTRAINT usercourserating_pkey PRIMARY KEY (userid, courseid)
);

CREATE TABLE IF NOT EXISTS public.userinfo
(
    userid integer,
    name character varying(255) COLLATE pg_catalog."default",
    degree degtype,
    batch integer
);

CREATE TABLE IF NOT EXISTS public.users
(
    userid serial NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    rollnumber character varying(8) COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default",
    lasteditted timestamp without time zone,
    role character varying(5) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (userid),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_rollnumber_key UNIQUE (rollnumber),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.userscore
(
    scoreid serial NOT NULL,
    userid integer,
    score integer DEFAULT 0,
    CONSTRAINT userscore_pkey PRIMARY KEY (scoreid)
);

CREATE TABLE IF NOT EXISTS public.usertask
(
    taskid serial NOT NULL,
    userid integer,
    courseid integer,
    task tasktype,
    start_time timestamp without time zone,
    end_time timestamp without time zone DEFAULT (CURRENT_TIMESTAMP + '7 days'::interval),
    CONSTRAINT usertask_pkey PRIMARY KEY (taskid)
);

CREATE TABLE IF NOT EXISTS public.message_edits
(
    editid serial NOT NULL,
    messageid integer,
    userid integer,
    old_content text COLLATE pg_catalog."default",
    edited_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_edits_pkey PRIMARY KEY (editid),
    CONSTRAINT message_edits_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT message_edits_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.message_attachments
(
    attachmentid serial NOT NULL,
    messageid integer,
    filename text COLLATE pg_catalog."default" NOT NULL,
    filetype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    filesize integer NOT NULL,
    filepath text COLLATE pg_catalog."default" NOT NULL,
    uploaded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_attachments_pkey PRIMARY KEY (attachmentid),
    CONSTRAINT message_attachments_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.message_mentions
(
    mentionid serial NOT NULL,
    messageid integer,
    mentioned_userid integer,
    mentioned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_mentions_pkey PRIMARY KEY (mentionid),
    CONSTRAINT message_mentions_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT message_mentions_mentioned_userid_fkey FOREIGN KEY (mentioned_userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.pinned_posts
(
    pinid serial NOT NULL,
    messageid integer,
    roomid integer,
    pinned_by integer,
    pinned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pinned_posts_pkey PRIMARY KEY (pinid),
    CONSTRAINT pinned_posts_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT pinned_posts_roomid_fkey FOREIGN KEY (roomid)
        REFERENCES public.rooms (roomid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT pinned_posts_pinned_by_fkey FOREIGN KEY (pinned_by)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.post_polls
(
    pollid serial NOT NULL,
    messageid integer,
    question text COLLATE pg_catalog."default" NOT NULL,
    options jsonb NOT NULL,
    is_multiple_choice boolean DEFAULT false,
    end_time timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT post_polls_pkey PRIMARY KEY (pollid),
    CONSTRAINT post_polls_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.poll_votes
(
    voteid serial NOT NULL,
    pollid integer,
    userid integer,
    selected_options jsonb NOT NULL,
    voted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT poll_votes_pkey PRIMARY KEY (voteid),
    CONSTRAINT poll_votes_pollid_fkey FOREIGN KEY (pollid)
        REFERENCES public.post_polls (pollid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT poll_votes_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.post_reports
(
    reportid serial NOT NULL,
    messageid integer,
    reporterid integer,
    reason text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'Pending'::character varying,
    reported_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT post_reports_pkey PRIMARY KEY (reportid),
    CONSTRAINT post_reports_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT post_reports_reporterid_fkey FOREIGN KEY (reporterid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.post_views
(
    viewid serial NOT NULL,
    messageid integer,
    userid integer,
    viewed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT post_views_pkey PRIMARY KEY (viewid),
    CONSTRAINT post_views_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT post_views_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.post_templates
(
    templateid serial NOT NULL,
    userid integer,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT post_templates_pkey PRIMARY KEY (templateid),
    CONSTRAINT post_templates_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.post_collaborators
(
    collaborationid serial NOT NULL,
    messageid integer,
    userid integer,
    role character varying(20) COLLATE pg_catalog."default" NOT NULL,
    joined_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT post_collaborators_pkey PRIMARY KEY (collaborationid),
    CONSTRAINT post_collaborators_messageid_fkey FOREIGN KEY (messageid)
        REFERENCES public.messages (messageid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT post_collaborators_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

ALTER TABLE IF EXISTS public.courseinfo
    ADD CONSTRAINT courseinfo_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courseinstructor
    ADD CONSTRAINT courseinstructor_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courseinstructor
    ADD CONSTRAINT courseinstructor_instructorid_fkey FOREIGN KEY (instructorid)
    REFERENCES public.faculty (facultyid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courserating
    ADD CONSTRAINT courserating_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.leaderboard
    ADD CONSTRAINT leaderboard_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS leaderboard_pkey
    ON public.leaderboard(userid);


ALTER TABLE IF EXISTS public.messagereactions
    ADD CONSTRAINT messagereactions_messageid_fkey FOREIGN KEY (messageid)
    REFERENCES public.messages (messageid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messagereactions
    ADD CONSTRAINT messagereactions_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_roomid_fkey FOREIGN KEY (roomid)
    REFERENCES public.rooms (roomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.progress
    ADD CONSTRAINT progress_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.progress
    ADD CONSTRAINT progress_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resetpassword
    ADD CONSTRAINT resetpassword_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS resetpassword_pkey
    ON public.resetpassword(userid);


ALTER TABLE IF EXISTS public.roommoderators
    ADD CONSTRAINT roommoderators_roomid_fkey FOREIGN KEY (roomid)
    REFERENCES public.rooms (roomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.roommoderators
    ADD CONSTRAINT roommoderators_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rooms
    ADD CONSTRAINT rooms_created_by_fkey FOREIGN KEY (created_by)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transcript
    ADD CONSTRAINT transcript_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.transcript
    ADD CONSTRAINT transcript_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.usercourserating
    ADD CONSTRAINT usercourserating_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.usercourserating
    ADD CONSTRAINT usercourserating_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.userinfo
    ADD CONSTRAINT userinfo_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.userscore
    ADD CONSTRAINT userscore_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.usertask
    ADD CONSTRAINT usertask_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.courses (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.usertask
    ADD CONSTRAINT usertask_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


CREATE or REPLACE VIEW ViewCourseInfo
AS SELECT c.courseid,
c.coursecode,
ci.coursename,
ci.credits,
ci.grading,
ci.difficulty,
CASE WHEN cr.ratedcount > 0
	THEN (CAST(cr.ratingsum AS FLOAT) + ci.difficulty) / (cr.ratedcount + 1)
	ELSE ci.difficulty 
	END 
as rating,
string_agg(DISTINCT f.name, ', ') as instructors,
(SELECT COUNT(*) FROM past_papers pp 
	WHERE pp.courseid = c.courseid) as past_papers_count
	FROM courses c LEFT JOIN courseinfo ci ON c.courseid = ci.courseid 
	LEFT JOIN courserating cr ON c.courseid = cr.courseid 
	LEFT JOIN courseinstructor cin ON c.courseid = cin.courseid 
	LEFT JOIN faculty f ON cin.instructorid = f.facultyid 
GROUP BY c.courseid, 
c.coursecode,
ci.coursename,
ci.credits,
ci.grading,
ci.difficulty,
cr.ratingsum,
cr.ratedcount;

END;