-- Users
CREATE TABLE USERS (
	USERID SERIAL PRIMARY KEY,
	USERNAME VARCHAR(255) UNIQUE NOT NULL,
	EMAIL VARCHAR(255) UNIQUE NOT NULL,
    ROLLNUMBER VARCHAR(8) UNIQUE NOT NULL,
	PASSWORD TEXT,
	LASTEDITTED TIMESTAMP DEFAULT NULL,
	ROLE VARCHAR(5)
);

-- Degree Datatype
CREATE TYPE DEGTYPE AS ENUM('BS(CS)', 'BS(SE)', 'BS(AF)', 'BS(DS)', 'BS(CV)');

-- UserInfo
CREATE TABLE USERINFO (
	USERID INT REFERENCES USERS (USERID),
	NAME VARCHAR(255),
	DEGREE DEGTYPE,
	BATCH INT CHECK (
		BATCH <= EXTRACT(
			YEAR
			FROM
				CURRENT_DATE
		) % 100
		AND BATCH >= EXTRACT(
			YEAR
			FROM
				CURRENT_DATE
		) % 100 - 4
	)
);

-- View for User Information
CREATE OR REPLACE VIEW VIEWUSERINFO AS
SELECT
	U.USERID,
	USERNAME,
	EMAIL,
	ROLLNUMBER,
	DEGREE,
	BATCH
FROM
	USERS U
	LEFT JOIN USERINFO UI ON U.USERID = UI.USERID

--	Semesters
CREATE TABLE SEMESTERS (
  SEMESTERID SERIAL PRIMARY KEY,
  NAME VARCHAR(20) NOT NULL -- e.g., "Fall 2022"
);

--	Transcript
CREATE TABLE TRANSCRIPT (
  TRANSCRIPTID SERIAL PRIMARY KEY,
  USERID INT REFERENCES USERS (USERID),
  COURSEID INT REFERENCES COURSES (COURSEID),
  SEMESTERID INT REFERENCES SEMESTERS (SEMESTERID),
  CREDITS INT,
  GRADE VARCHAR(2)
);

--	View Transcripts
CREATE VIEW VIEWTRANSCRIPTS AS
SELECT
	TRANSCRIPTID,
	USERID,
	COURSENAME,
	COURSECODE,
	C.COURSEID,
	GRADE,
	CI.CREDITS,
	T.SEMESTERID
FROM
	TRANSCRIPT T
	LEFT JOIN COURSES C ON C.COURSEID = T.COURSEID
	LEFT JOIN COURSEINFO CI ON CI.COURSEID = C.COURSEID

-- Reset Password Table
CREATE TABLE RESETPASSWORD (
    USERID INT REFERENCES USERS(USERID),
    RESET_TOKEN TEXT NOT NULL,
    TOKEN_EXPIRY TIMESTAMP NOT NULL,
    PRIMARY KEY (USERID)
);

-- Courses
CREATE TABLE COURSES (
	COURSEID SERIAL PRIMARY KEY,
	COURSECODE VARCHAR(6) UNIQUE NOT NULL
);

-- CourseInfo
CREATE TABLE COURSEINFO (
	COURSEID INT REFERENCES COURSES (COURSEID),
	COURSENAME TEXT,
	CREDITS INT,
	GRADING VARCHAR(8) CHECK (GRADING IN ('Relative', 'Absolute')),
	DIFFICULTY INT CHECK (
		DIFFICULTY >= 1
		AND DIFFICULTY <= 5
	)
);

-- CourseRating
CREATE TABLE COURSERATING (
    COURSEID INT REFERENCES COURSES (COURSEID), 
    RATINGSUM INT DEFAULT 0,                                
    RATEDCOUNT INT DEFAULT 0                                 
);

-- ViewCourse
CREATE VIEW VIEWCOURSES AS
SELECT
	CI.COURSEID,
	CI.COURSENAME,
	CI.CREDITS,
	CI.GRADING,
	CI.DIFFICULTY,
	(CR.RATINGSUM::FLOAT / NULLIF(CR.RATEDCOUNT, 0)) AS RATING
FROM
	COURSEINFO CI
	LEFT JOIN COURSERATING CR ON CR.COURSEID = CI.COURSEID;


-- CourseInstructor
CREATE TABLE COURSEINSTRUCTOR (
	COURSEID INT REFERENCES COURSES (COURSEID),
	INSTRUCTORID INT REFERENCES FACULTY (FACULTYID)
);

-- View Course Information
CREATE VIEW VIEWCOURSEINFO AS
SELECT
	C.COURSEID,
	COURSECODE,
	COURSENAME,
	CREDITS,
	GRADING,
	DIFFICULTY
FROM
	COURSES C
	JOIN COURSEINFO CI ON CI.COURSEID = C.COURSEID
ORDER BY
	COURSECODE

-- Faculty
CREATE TABLE FACULTY (
	FACULTYID SERIAL PRIMARY KEY,
	NAME VARCHAR(255),
	DESIGNATION VARCHAR(4),
	OFFICE VARCHAR(255)
);

-- Task Datatype
CREATE TYPE TASKTYPE AS ENUM( 'Quiz', 'Assignment', 'Sessional', 'Project', 'Final');

-- To Do List
CREATE TABLE USERTASKS (
	TASKID SERIAL PRIMARY KEY,
	USERID INT REFERENCES USERS (USERID),
	CONTENT TEXT,
	PRIORITY VARCHAR(6),
	DUEDATE TIMESTAMPTZ,
	STATUS VARCHAR(10)
);

-- Progress
CREATE TABLE PROGRESS (
    PROGRESSID SERIAL PRIMARY KEY,        
    USERID INT REFERENCES USERS(USERID),  
    COURSEID INT REFERENCES COURSES(COURSEID), 
    TASK TASKTYPE,                         
    TASKID INT,                            
    SCORE INT CHECK (SCORE >= 0),          
    MAX_SCORE INT CHECK (MAX_SCORE > 0),   
    COMPLETION_DATE TIMESTAMP default null,             
    STATUS VARCHAR(20) CHECK (STATUS IN ('In Progress', 'Completed', 'Not Started'))  
);

-- UserScore
CREATE TABLE USERSCORE (
	SCOREID SERIAL PRIMARY KEY,
	USERID INT REFERENCES USERS (USERID),
	SCORE INT DEFAULT 0
);

-- Leaderboard
CREATE TABLE LEADERBOARD (
    USERID INT PRIMARY KEY REFERENCES USERS(USERID),  
    TOTAL_SCORE INT DEFAULT 0,                         
    RANK INT,                                          
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP    
);

--	Forums and ChatRooms
CREATE TABLE ROOMS (
    ROOMID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY INT REFERENCES USERS(USERID)
);

CREATE TABLE MESSAGES (
    MESSAGEID SERIAL PRIMARY KEY,
    ROOMID INT REFERENCES ROOMS(ROOMID) ON DELETE CASCADE,
    USERID INT REFERENCES USERS(USERID) ON DELETE SET NULL,
    CONTENT TEXT NOT NULL,
    POSTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE REPLIES (
    REPLYID SERIAL PRIMARY KEY,
    MESSAGEID INT REFERENCES MESSAGES(MESSAGEID) ON DELETE CASCADE,
    USERID INT REFERENCES USERS(USERID) ON DELETE SET NULL,
    CONTENT TEXT NOT NULL,
    REPLIED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PARENT_REPLY_ID INT REFERENCES REPLIES(REPLYID) ON DELETE CASCADE,
    CHECK (PARENT_REPLY_ID IS NULL OR PARENT_REPLY_ID != REPLYID)
);

CREATE TABLE MESSAGEREACTIONS (
	REACTIONID SERIAL PRIMARY KEY,
	MESSAGEID INT REFERENCES MESSAGES (MESSAGEID) ON DELETE CASCADE,
	USERID INT REFERENCES USERS (USERID) ON DELETE CASCADE,
	REACTION_TYPE VARCHAR(10) CHECK (REACTION_TYPE IN ('Like', 'Dislike', 'Laugh', 'Sad', 'Angry')),
	UNIQUE (MESSAGEID, USERID)
);

CREATE TABLE ROOMMEMBERS (
    MEMBERID SERIAL PRIMARY KEY,
    ROOMID INT REFERENCES ROOMS(ROOMID) ON DELETE CASCADE,
    USERID INT REFERENCES USERS(USERID) ON DELETE CASCADE,
    JOINED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ROOMMODERATORS (
	MODERATORID SERIAL PRIMARY KEY,
	ROOMID INT REFERENCES ROOMS(ROOMID) ON DELETE CASCADE,
	USERID INT REFERENCES USERS(USERID) ON DELETE CASCADE
);

--	Replies
CREATE TABLE REPLIES (
	REPLYID SERIAL PRIMARY KEY,
	MESSAGEID INT REFERENCES MESSAGES (MESSAGEID) ON DELETE CASCADE,
	ROOMID INT REFERENCES ROOMS (ROOMID) ON DELETE CASCADE,
	USERID INT REFERENCES USERS (USERID) ON DELETE CASCADE,
	CONTENT TEXT,
	POSTED_AT TIMESTAMP,
	STATUS VARCHAR(8) DEFAULT 'Pending'
);

-- View for Room Messages
CREATE VIEW VIEWROOMMESSAGES AS
SELECT
    R.ROOMID,
    R.NAME AS ROOMNAME,
    R.DESCRIPTION,
    U.USERID,
    UI.NAME AS USERNAME,
    ROLLNUMBER,
    M.CONTENT,
    M.POSTED_AT
FROM
    ROOMS R
    LEFT JOIN MESSAGES M ON R.ROOMID = M.ROOMID
    LEFT JOIN USERS U ON U.USERID = M.USERID
    LEFT JOIN USERINFO UI ON UI.USERID = U.USERID;

-- View for Room Messages (Improved)
CREATE VIEW ROOMMESSAGES AS
SELECT
	R.ROOMID,
	R.NAME,
	DESCRIPTION,
	U.USERID,
	USERNAME,
	ROLLNUMBER,
	M.MESSAGEID,
	CONTENT,
	POSTED_AT,
	STATUS
FROM
	ROOMS R
	LEFT JOIN MESSAGES M ON M.ROOMID = R.ROOMID
	LEFT JOIN USERS U ON U.USERID = M.USERID
	LEFT JOIN USERINFO UI ON UI.USERID = U.USERID

--	View for Pending Messages
CREATE VIEW PENDINGMESSAGES AS
SELECT
	R.ROOMID,
	R.NAME,
	DESCRIPTION,
	U.USERID,
	USERNAME,
	ROLLNUMBER,
	M.MESSAGEID,
	CONTENT,
	POSTED_AT,
	STATUS
FROM
	ROOMS R
	LEFT JOIN MESSAGES M ON M.ROOMID = R.ROOMID
	LEFT JOIN USERS U ON U.USERID = M.USERID
	LEFT JOIN USERINFO UI ON UI.USERID = U.USERID
WHERE
	STATUS = 'Pending'

-- View for Room Replies
CREATE VIEW MESSAGEREPLIES1 AS
SELECT
	REPLYID,
	MESSAGEID,
	ROOMID,
	U.USERID,
	U.USERNAME,
	rollnumber,
	CONTENT,
	POSTED_AT
FROM
	REPLIES R
	LEFT JOIN USERS U ON U.USERID = R.USERID
	LEFT JOIN USERINFO UI ON UI.USERID = U.USERID


CREATE OR REPLACE VIEW MESSAGEREPLIES AS
SELECT
    R.REPLYID,
    R.MESSAGEID,
    R.PARENT_REPLY_ID,
    RM.ROOMID,
    U.USERID,
    U.USERNAME,
    UI.rollnumber,
    R.CONTENT,
    R.REPLIED_AT AS POSTED_AT,
    -- Additional useful fields for nested replies
    (SELECT COUNT(*) FROM REPLIES WHERE PARENT_REPLY_ID = R.REPLYID) AS REPLY_COUNT,
    (SELECT USERNAME FROM USERS WHERE USERID = 
        (SELECT USERID FROM REPLIES WHERE REPLYID = R.PARENT_REPLY_ID)
    ) AS PARENT_AUTHOR_NAME
FROM
    REPLIES R
    LEFT JOIN USERS U ON U.USERID = R.USERID
    LEFT JOIN USERINFO UI ON UI.USERID = U.USERID
    LEFT JOIN MESSAGES M ON M.MESSAGEID = R.MESSAGEID
    LEFT JOIN ROOMS RM ON RM.ROOMID = M.ROOMID;